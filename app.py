"""
ANALIZADOR INTERACTIVO DE DATASETS
Aplicaci√≥n para explorar y visualizar cualquier conjunto de datos
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from dotenv import load_dotenv
import google.generativeai as genai

# Cargar variables de entorno
if os.path.exists('credentials/.env'):
    load_dotenv('credentials/.env')
else:
    # Para despliegue en Streamlit Cloud
    pass

# Funci√≥n para an√°lisis con Gemini
def generar_analisis_ia(df):
    try:
        # Validar tama√±o del dataset
        if len(df) > 10000:
            return "‚ö†Ô∏è El dataset es muy grande para an√°lisis con IA (m√°ximo 10,000 filas)"
            
        # Configurar modelo
        genai.configure(api_key=os.getenv("GEMINI_KEY") or st.secrets.get("GEMINI_KEY"))
        model = genai.GenerativeModel('gemini-pro')
        
        # Crear resumen optimizado
        muestra = df.sample(min(3, len(df))).to_markdown()
        resumen = f"""
        Columnas ({len(df.columns)}): {', '.join(df.columns)}
        Filas: {len(df):,}
        Tipos de datos: {dict(df.dtypes)}
        Estad√≠sticas clave: {df.describe().loc[['mean', 'std', 'min', 'max']].to_markdown()}
        """
        
        # Crear prompt eficiente
        prompt = f"""
        Analiza este dataset y genera un informe conciso en espa√±ol con:
        - Descripci√≥n general en 1 oraci√≥n
        - 3 hallazgos principales
        - 2 recomendaciones de an√°lisis
        [Datos]: {resumen}
        [Muestra]: {muestra}
        """
        
        # Configuraci√≥n de generaci√≥n
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                max_output_tokens=300,
                temperature=0.2
            )
        )
        
        return response.text
        
    except Exception as e:
        return f"‚ùå Error: {str(e)}"

# Configurar la p√°gina
st.set_page_config(
    page_title="Analizador de Datos",
    page_icon="üìä",
    layout="wide"
)

# Cargar datos de ejemplo
@st.cache_data
def load_sample_data():
    try:
        return pd.read_csv('sample_data.csv')
    except FileNotFoundError:
        st.error("Archivo de datos de ejemplo no encontrado.")
        return None

# Sidebar para carga de datos y configuraci√≥n
st.sidebar.header("Configuraci√≥n de Datos")

# Cargar datos de usuario
uploaded_file = st.sidebar.file_uploader(
    "Sube tu dataset (CSV)",
    type=["csv"]
)

# Opciones de limpieza
clean_method = st.sidebar.radio(
    "Manejar valores faltantes:",
    ["Rellenar con 0", "Eliminar filas con NA"]
)

# Procesar datos cargados
current_df = None
if uploaded_file:
    try:
        if uploaded_file.name.endswith('.csv'):
            current_df = pd.read_csv(uploaded_file)
        else:
            current_df = pd.read_excel(uploaded_file)
            
        # Aplicar limpieza
        if clean_method == "Rellenar con 0":
            current_df.fillna(0, inplace=True)
        else:
            current_df.dropna(inplace=True)
            
    except Exception as e:
        st.sidebar.error(f"Error al cargar archivo: {str(e)}")
else:
    current_df = load_sample_data()

# T√≠tulo de la aplicaci√≥n
st.title("üìä Analizador Interactivo de Datasets")
st.markdown("Explora y visualiza cualquier conjunto de datos de forma interactiva")

# Sidebar para navegaci√≥n
page = st.sidebar.radio("Navegaci√≥n", ["Inicio", "An√°lisis Exploratorio", "Acerca de"])

# P√°gina de inicio
if page == "Inicio":
    st.header("Bienvenido al Analizador de Datasets")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        ### üöÄ ¬øQu√© puedes hacer?
        
        - **Visualizar datos** en tablas interactivas
        - **Analizar relaciones** entre variables
        - **Generar gr√°ficos** profesionales
        - **Explorar distribuciones** estad√≠sticas
        """)
        
        if current_df is not None:
            st.subheader("Vista previa de los datos")
            st.dataframe(current_df.head())
    
    with col2:
        if current_df is not None:
            st.markdown("### üìå Resumen R√°pido")
            st.write(f"- **Filas:** {current_df.shape[0]}")
            st.write(f"- **Columnas:** {current_df.shape[1]}")
            st.write(f"- **Variables num√©ricas:** {len(current_df.select_dtypes(include=np.number).columns)}")
            st.write(f"- **Variables categ√≥ricas:** {len(current_df.select_dtypes(include=['object', 'category']).columns)}")

# P√°gina de an√°lisis exploratorio
elif page == "An√°lisis Exploratorio":
    st.header("An√°lisis Exploratorio de Datos")
    
    if current_df is not None:
        st.markdown("""
        Explora tus datos mediante visualizaciones interactivas y an√°lisis estad√≠sticos
        """)
        
        # Secci√≥n de estad√≠sticas
        st.subheader("Estad√≠sticas Descriptivas")
        st.dataframe(current_df.describe())
        
        # Matriz de correlaci√≥n
        st.subheader("Matriz de Correlaci√≥n")
        numeric_cols = current_df.select_dtypes(include=np.number).columns.tolist()
        if len(numeric_cols) > 1:
            corr = current_df[numeric_cols].corr()
            fig, ax = plt.subplots(figsize=(10, 8))
            sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f')
            st.pyplot(fig)
        else:
            st.warning("Se necesitan al menos 2 variables num√©ricas para la matriz de correlaci√≥n")
        
        # Selector de gr√°ficos
        st.subheader("Generador de Gr√°ficos")
        col1, col2 = st.columns(2)
        
        with col1:
            plot_type = st.selectbox("Tipo de gr√°fico", 
                                   ["Histograma", "Dispersi√≥n", "Barras"])
        
        with col2:
            x_var = st.selectbox("Variable X", current_df.columns)
            if plot_type != "Histograma":
                y_var = st.selectbox("Variable Y", current_df.columns)
        
        # Generar gr√°ficos
        fig, ax = plt.subplots()
        try:
            if plot_type == "Histograma":
                sns.histplot(current_df[x_var], kde=True, ax=ax)
                ax.set_title(f'Distribuci√≥n de {x_var}')
            elif plot_type == "Dispersi√≥n":
                sns.scatterplot(x=x_var, y=y_var, data=current_df, ax=ax)
                ax.set_title(f'{x_var} vs {y_var}')
            elif plot_type == "Barras":
                sns.barplot(x=x_var, y=y_var, data=current_df, ax=ax)
                ax.set_title(f'{x_var} vs {y_var}')
            
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Error al generar gr√°fico: {str(e)}")
        
        # An√°lisis con IA
        if st.button("üß† Generar An√°lisis con IA"):
            if current_df is not None:
                with st.spinner("Analizando con IA (esto puede tomar 20 segundos)..."):
                    analisis = generar_analisis_ia(current_df)
                    st.markdown("## üìÑ Informe de IA")
                    st.write(analisis)
                    
                    # Estimaci√≥n de tokens
                    tokens = len(analisis) // 4
                    st.caption(f"Tokens aproximados usados: {tokens}")
            else:
                st.warning("Primero carga un dataset")

# P√°gina Acerca de
elif page == "Acerca de":
    st.header("Acerca de la Aplicaci√≥n")
    st.markdown("""
    ### Caracter√≠sticas Principales:
    - **Carga m√∫ltiples formatos:** CSV y Excel
    - **Limpieza autom√°tica:** Manejo de valores faltantes
    - **Visualizaci√≥n interactiva:** Gr√°ficos personalizables
    - **An√°lisis estad√≠stico:** Informes descriptivos completos
    
    Desarrollado con Streamlit y Python üêç
    """)

if __name__ == "__main__":
    pass